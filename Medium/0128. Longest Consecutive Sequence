//Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
//You must write an algorithm that runs in O(n) time.
//
//Example 1:
//Input: nums = [100,4,200,1,3,2]
//Output: 4
//Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
//
//Example 2:
//Input: nums = [0,3,7,2,5,8,4,6,0,1]
//Output: 9


import Foundation

class Solution {

    func isSequence(_ a: Int, _ b: Int) -> Bool {
        return a + 1 == b
    }

    func isEqual(_ a: Int, _ b: Int) -> Bool {
        return a == b
    }

    func longestConsecutive(_ nums: [Int]) -> Int {
        guard !nums.isEmpty else { return 0 }
        let sorted = nums.sorted()
        var token = sorted.first!
        var sequence = 1
        var maxSequence = 1

        for i in 1..<sorted.count {
            if isSequence(token, sorted[i]) {
                sequence += 1
                maxSequence = max(maxSequence, sequence)
            } else if isEqual(token, sorted[i]) {
                
            } else {
                maxSequence = max(maxSequence, sequence)
                sequence = 1
            }
            token = sorted[i]
        }

        return maxSequence
    }

    func longestConsecutiveOptimized(_ nums: [Int]) -> Int {
        guard !nums.isEmpty else { return 0 }
        let sorted = nums.sorted()
        var sequence = 1
        var maxSequence = 1

        for i in 1..<sorted.count {
            if sorted[i] == sorted[i - 1] + 1 {
                sequence += 1
                maxSequence = max(maxSequence, sequence)
            } else if sorted[i] != sorted[i - 1] {
                sequence = 1
            }
        }

        return maxSequence
    }
}